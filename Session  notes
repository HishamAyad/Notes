* What's time Complexity?
    How does the running time change as the size of input change.

* Running time depends on:
    1- Processor.
    2- Read/Write speed to memory.
    3- 32 bit VS 64 bit.
    4- INPUT.
    5- ...

* What are the cases your code may face?
    1- Best case.
    2- Worst case.
    3- Average case.

* The notations to represent your code's Complexity:
    1- Big O Notation     ---->     the upper bound of the time.
    2- Omega Notation     ---->     the lower bound of the time.
    3- Theta Notation     ---->     the bound itself.

* Rules:
    1- Running time is the sum of running times of all consecutive blocks.
    2- Nested loops are multiplied.
        In general -> Nested repetitive Blocks are multiplied.
    3- In Conditional statements pick the "Worst case" one.
    4- Drop Constants (addition, subtraction, multiplication or division).
    5- Drop all lower order terms.


* Some useful Observations:
  Big O                 Name                    Max n
-------------------------------------------------------------------------------------------
  O(1)        ---->     Constant      ---->     1e18      ---->     Math, Observation
  O(Log(n))   ---->     Logarithmic   ---->     1e18      ---->     Binary Search (lower -upper- bound)
  O(n)        ---->     Linear        ---->     1e8       ---->     one loop
  O(n*Log(n)) ---->     LogLinear     ---->     4e5       ---->     Sorting, loop + binary search
  O(n^2)      ---->     Quadratic     ---->     1e4       ---->     nested loop
  O(2^n)      ---->     Exponential   ---->     25        ---->     Bitmasks, finding all possible answers
  O(n!)       ---->     factorial     ---->     11        ---->     finding all permutations


int calcSum(int a, int b){		//O(1)
  int sum = a+b;
  return sum;
}

double calcAverage(int a, int b){		//O(1)
  double avg = (a+b)/2.0;
  return avg;
}

bool isAlphabit(char x){		//O(1)
  return (x>='A' && x<='Z' || x>='a' && x<='z');
}



double sumHarmonicSeries(int n){		//O(n)
  double sum = 0;
  for(int i = 1 ; i <= n ; ++i){
    sum += (1.0/i);
  }
  return sum;
}

long long calcSumSegment(int a, int b){		//O(b)
  long long sum = 0;
  for(int i = a ; i<=b ; ++i)
    sum += i;
  return sum;
}

int stepper(int n, int s){      //O(n/s)
  int ret = 0;
  for(int i = 1 ; i <= n ; i += s){
    ret += i;
  }
  return ret;
}


int calcLog(int n){		//O(log(n))
  int ret = 0;
    while(n > 1){
    ++ret;
    n /= 2;
  }
  return ret;
}


void printPowersOfTwoTill(int n){   //O(log(n))
  for(int p = 1 ; p <= n ; p *= 2)
    cout<<p<<endl;
}

void nestedloops (int n){     //O(n^2)
  for(int i=0;i<n;i++)
    for(int j=0;j<n-1;j++)
      //Statment 
 }
 
void loops (int n){     //O(n)
  for(int i=0;i<n;i++){
     //Statment
    }
    for(int i=0;i<n;i++){
      //Statment
     }
}

void loops2 (int n){     //O(n^2)
  for(int i=0;i<n;i++){
     //Statment
    }
    for(int i=0;i<n;i++){
      for(int j=0;j<n;j++)
       //Statment
     }
}

void something(int n){		//O(n*log(n))
  for(int i = 1 ; i <= n ; ++i)
    for(int j = i ; j <= n ; j+=i)
      //Something
}

